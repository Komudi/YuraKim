
1강 - 모놀리틱 아키텍처 이해
1. 목표
- 모놀리틱이 나온 배경과 아키텍처를 이해한다
- cloud native 한 msa를 이해한다
- netfilx OSS, Spring Cloud를 통해 MSA 플랫폼을 구축한다


로컬 apache tomcat
1) 개발
개발자가 개발한 코드는 tomcat(WAS) 에 의해 실행되고 프로그램 상태느(state)는 데이터 베이스에 저장

3명 개발자가 개발한다고 하면
1DB , 3TOMCAT


소스 코드 매니지먼트(SCM) 으로 관리 (GITHUB), DB는 공유해서 사용 


2) 최초 상용 배포
톰캣 1, DB 1
SCP를 통해 CLEAN 배포 (STOP -> DELIVERY -> START)
DNS(12st.com) -> TOMCAT

3) 배포
HA(High Avaliability)구성 - 지속적으로 구동되는(uptime)시스템
Load Balancer - L4 switch(HW), L7 (Nginx, HXProxy)
->로드밸런서 - 2 톰캣 - 1DB
-> 다운타임 없어야됨. 높은 가용성을 가진 서버 구성
LB OUT -> TOMCAT STOP -> DELIVERY -> TOMCAT START -> LB IN

4) 서버 증설 - 동시접속 1000명 이상
서버 3대 추가 구입
LB 설정 변경, 배포 방식 변경(Jenkins, Ansible, Chef, etc)

조직증설 및 개편 - 상품팀, 주문팀으로 분리
단일 repository
issue 1. Branch Merge 시 Conflict
issue 2. QA를 어디까지? - 정기배포일
issue 3. 각자 다른 일정, 배포이슈
issue 4. etc

github - Order, Share.jar, Product -> Share.jar 팀별 공유

↓
팀 별 repository 분리, 각 코드 commit 시 팀별 배포 가능
공통적인 부분들을 Share Repository 에 넣음
각 프로젝트에서 compile 'kr.co.12st:share:1.0.0-SNAPSHOT'
접속 시 order.12st.com, product.12st.com

5) 서버 증설 - 개발자 150명 +, 여러팀, 하나의 DB, 수백만 라인의 공통 코드(소스 코드만 100MB 이상), copy & paste 에서 오는 중복과 복잡도

※ 콘웨이의 법칙
- 조직의 의상소통 구조와 똑같은 구조를 갖는 시스템을 설계
- 너무 많은 통신 관계를 갖는 것은 프로젝트에 대한 위험



6) 모놀리틱 아키텍처 정리
- 대부분 it회사 시작은 모놀리틱
1. 장점
  - 개발이 단순(repository 하나 체크아웃 받아서 띄우면 됨)
  - 배포가 단순 (war 하나만 배포하면 됨)
  - scale-out 이 단순(서버 하나 복사하면됨)
  - DB 성능으로 인한 한계 존재
2. 단점
  - 무겁다 - IDE가 못 받쳐줌 ( 소스코드만 100MB 이상되니..)
  - 어플리케이션 시작이 오래걸림
  - 기술 스택 바꾸기가 어려움
  - 높은 결합도
  - 코드베이스의 책임 한계와 소유권이 불투명

7) 개발 방향
- 새로운 언어, 깔끔한 코드로 전면 재개편 (차세대 프로젝트, 빅뱅, netscape)
- MSA 플랫폼 구축하며 기존 lagacy 를 고사


2강 - 마이크로서비스 아키텍처(MSA) 이해

msa : 시스템을 여러개의 독립된 서비스로 나눠서, 이 서비스를 조합함으로서 기능을 제공하는 아키텍처 디자인 패턴
-> 넷플릿스, 트위터 : 500개 이상 마이크로 서비스

1) 아마존 운영 
2002
1. 모튼 팀들은 데이터와 기능들을 서비스 인터페이스로 연결
2, 팀들은 이 인터페이스를 통해서만 연락해야됨
3. 다른 어떤 커뮤니케이션 방법 허용 x. 모든 커뮤니케이션은 네트워크를 통한 서비스 인터페이스로(직접 링크 보내거나 다른 팀의 스토리지에 직접 억세스 x, 공유메모리, 백도어 x)
4. 모든 서비스 인터페이스는 예외없이 외부에서 이용가능하게 만들어져야함. 외부 개발자들이 인터페이스를 이용할 수 있게 해야함
2006 아마존 웹 서비스 (AWS) 릴리즈 - 내부적으로 사용한 것과 똑같은 플랫폼

2) 넷플릿스
- 2008 single points of failure 발생 -> scale-up 확장만 가능한 인프라 스트럭처와 단일 장애 지점 (SPOF) 한계에서 벗어나길 선언 -> 아파치 카산드라
- 2009 AWS로 이관 시작 ( 목표 : 확장성, 성능, 가용성)

3) MSA
- 각서비스간 네트워크를 통해, 보통 http
- 독립된 배포 단위
- 각 서비스는 쉽게 교체 가능
- 각 서비스는 기능 중심으로 구성됨. e.g. 프론트 엔드, 추천, 정산, 상품 등
- 자동화 된 프로세스로 구축되고 배포
- 마이크로 서비스 : 3~9명의 개발자들이 스스로 개발할수 있는정도
