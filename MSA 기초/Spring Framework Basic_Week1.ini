1장. Framework 개념
 1. SW 재사용 방안
1) 복붙 -> jdk 버전 바뀌면 a,b클래스 모두 변경해야함
2) 매서드 호출 - 매서드 시그니처 변경하면 모든 클래스에 영향
3) 클래스 재사용 (상속)
4) AOP (Aspect Oriented Programming) -> 관심사 분리

2. 디자인패턴 & 프레임워크 관련성
1) 디자인 패턴 - 재사용하기 좋은 형태로 특정 규약을 묶어서 정리한것
->요구사항 변경에 대한 변경 최소화, 직관적인코드 사용
2) 프레임워크 - 성능, 보안, 확장성, 안정성 을 만족하는 구조와 안정적으로 실행하도록 만들어주는 구조
-> 개발자들이 기능적인 요구사항에 집중할 수 있도록 해줌
디자인 패턴은 프레임워크의 핵심적인 특징 -> 프레임워크에서 디자인패턴을 적용

3. 프레임워크 구성요소와 종류
1)IoC : 제어의 역전. 인스턴스 생명주기 관리를 개발자가 아닌 컨테이너가 대신해줌
2) 라이브러리 : 특정부분의 기술적인 구현을 라이브러리 형태로 제공
  -> 프레임워크-> 유저코드 -> 라이브러리 호출


2장. 환경설정
- java, oracle, tomcat, spring  환경설정

3장. Spring 프레임워크 개요
1) Spring Framework : 오픈소스 애플리케이션 프레임워크 -> 개발자가 비즈니스 로직개발에만 전념할수있도록
2) POJO (Plain Old Java Object) : 객체지향 원리 충실, 필요에 따라 재활용될 수 있는 방식으로 설계
3) 컨테이너 : 자바 객체의 라이프사이클 관리, 스프링 컨테이너 로부터 필요 객체 가져와 사용할수 있음
4) Spring Framework 기능요소
- Core 컨테이너 : 스프링 프레임워크 기본기능. BeanFactory - 기본 컨테이너,
- AOP 모듈, ORM, DAO(JDBC), Web, Context(BeanFactory 확장), WebMVC 


4장. Spring 프로젝트 시작하기
1) STS : 이클립스 확장판 -> bean클래스 자동완성
2) Maven : 오픈소스. 라이브러리 관리 편리, 여러 프로젝트 정보 공유 및 일관된 빌드 프로세스 지원
3) pom.xml : 프로젝트 객체 모델정보. 의존관계 추가(라이브러리)

5장. Ioc컨테이너와 DI
1) IOC - DL(의존성 검색), DI (의존성 주입)
-> DL 사용시 컨테이너 종속성 증가하여 주로  DI 사용
2) DI 사용시 beans.xml(설정파일) 이용 호출
3) DI관리 객체 - 빈. 빈 관리 -> 빈 factory(getBean 메서드 정의)